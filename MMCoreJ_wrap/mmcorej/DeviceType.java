/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mmcorej;

public final class DeviceType {
  public final static DeviceType UnknownType = new DeviceType("UnknownType", MMCoreJJNI.UnknownType_get());
  public final static DeviceType AnyType = new DeviceType("AnyType");
  public final static DeviceType CameraDevice = new DeviceType("CameraDevice");
  public final static DeviceType ShutterDevice = new DeviceType("ShutterDevice");
  public final static DeviceType StateDevice = new DeviceType("StateDevice");
  public final static DeviceType StageDevice = new DeviceType("StageDevice");
  public final static DeviceType XYStageDevice = new DeviceType("XYStageDevice");
  public final static DeviceType SerialDevice = new DeviceType("SerialDevice");
  public final static DeviceType GenericDevice = new DeviceType("GenericDevice");
  public final static DeviceType AutoFocusDevice = new DeviceType("AutoFocusDevice");
  public final static DeviceType CoreDevice = new DeviceType("CoreDevice");
  public final static DeviceType ImageProcessorDevice = new DeviceType("ImageProcessorDevice");
  public final static DeviceType ImageStreamerDevice = new DeviceType("ImageStreamerDevice");
  public final static DeviceType SignalIODevice = new DeviceType("SignalIODevice");
  public final static DeviceType MagnifierDevice = new DeviceType("MagnifierDevice");
  public final static DeviceType ProgrammableIODevice = new DeviceType("ProgrammableIODevice");
  public final static DeviceType SLMDevice = new DeviceType("SLMDevice");
  public final static DeviceType CommandDispatchDevice = new DeviceType("CommandDispatchDevice");
  public final static DeviceType HubDevice = new DeviceType("HubDevice");
  public final static DeviceType GalvoDevice = new DeviceType("GalvoDevice");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static DeviceType swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + DeviceType.class + " with value " + swigValue);
  }

  private DeviceType(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private DeviceType(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private DeviceType(String swigName, DeviceType swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static DeviceType[] swigValues = { UnknownType, AnyType, CameraDevice, ShutterDevice, StateDevice, StageDevice, XYStageDevice, SerialDevice, GenericDevice, AutoFocusDevice, CoreDevice, ImageProcessorDevice, ImageStreamerDevice, SignalIODevice, MagnifierDevice, ProgrammableIODevice, SLMDevice, CommandDispatchDevice, HubDevice, GalvoDevice };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}


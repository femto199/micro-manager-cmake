/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package mmcorej;

   import org.json.JSONObject;
   import java.awt.geom.Point2D;
   import java.awt.Rectangle;

public class CMMCore {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CMMCore(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CMMCore obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MMCoreJJNI.delete_CMMCore(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

   private JSONObject metadataToMap(Metadata md) {
      JSONObject tags = new JSONObject();
      for (String key:md.GetKeys()) {
         try {
            tags.put(key, md.GetSingleTag(key).GetValue());
         } catch (Exception e) {} 
      }
      return tags;
   }

   private String getROITag() throws java.lang.Exception {
      String roi = "";
      int [] x = new int[1];
      int [] y = new int[1];
      int [] xSize = new int[1];
      int [] ySize = new int[1];
      getROI(x, y, xSize, ySize);
      roi += x[0] + "-" + y[0] + "-" + xSize[0] + "-" + ySize[0];
      return roi;
   }

   private String getPixelType() {
     int depth = (int) getBytesPerPixel();
     switch (depth) {
         case 1:
            return "GRAY8";
         case 2:
            return "GRAY16";
         case 4:
            return "RGB32";
         case 8:
            return "RGB64";
     }
     return "";
   }

   private String getMultiCameraChannel(JSONObject tags, int cameraChannelIndex) {
	  try {
	  String camera = tags.getString("Core-Camera");
	  String physCamKey = camera + "-Physical Camera " + (1 + cameraChannelIndex);
	  if (tags.has(physCamKey)) {
		 try {
			return tags.getString(physCamKey);
		 } catch (Exception e2) {
			return null;
		 }
	  } else {
		 return null;
	  }
	 } catch (Exception e) {
	   return null;
	 }

   }

   private TaggedImage createTaggedImage(Object pixels, Metadata md, int cameraChannelIndex) throws java.lang.Exception {
      TaggedImage image = createTaggedImage(pixels, md);
      JSONObject tags = image.tags;
      
      if (!tags.has("CameraChannelIndex")) {
         tags.put("CameraChannelIndex", cameraChannelIndex);
         tags.put("ChannelIndex", cameraChannelIndex);
      }
      if (!tags.has("Camera")) {
         String physicalCamera = getMultiCameraChannel(tags, cameraChannelIndex);
         if (physicalCamera != null) {
            tags.put("Camera", physicalCamera);
            tags.put("Channel",physicalCamera);
         }
      }
      return image;
   }

   private TaggedImage createTaggedImage(Object pixels, Metadata md) throws java.lang.Exception {
      JSONObject tags = metadataToMap(md);
      PropertySetting setting;
      Configuration config = getSystemStateCache();
      for (int i = 0; i < config.size(); ++i) {
         setting = config.getSetting(i);
         String key = setting.getDeviceLabel() + "-" + setting.getPropertyName();
         String value = setting.getPropertyValue();
          tags.put(key, value);
      }
      tags.put("BitDepth", getImageBitDepth());
      tags.put("PixelSizeUm", getPixelSizeUm(true));
      tags.put("ROI", getROITag());
      tags.put("Width", getImageWidth());
      tags.put("Height", getImageHeight());
      tags.put("PixelType", getPixelType());
      tags.put("Frame", 0);
      tags.put("FrameIndex", 0);
      tags.put("Position", "Default");
      tags.put("PositionIndex", 0);
      tags.put("Slice", 0);
      tags.put("SliceIndex", 0);
      String channel = getCurrentConfigFromCache(getPropertyFromCache("Core","ChannelGroup"));
      if ((channel == null) || (channel.length() == 0)) {
         channel = "Default";
      }
      tags.put("Channel", channel);
      tags.put("ChannelIndex", 0);


      try {
         tags.put("Binning", getProperty(getCameraDevice(), "Binning"));
      } catch (Exception ex) {}
      
      return new TaggedImage(pixels, tags);	
   }

   public TaggedImage getTaggedImage(int cameraChannelIndex) throws java.lang.Exception {
      Metadata md = new Metadata();
      Object pixels = getImage(cameraChannelIndex);
      return createTaggedImage(pixels, md, cameraChannelIndex);
   }

   public TaggedImage getTaggedImage() throws java.lang.Exception {
      return getTaggedImage(0);
   }

   public TaggedImage getLastTaggedImage(int cameraChannelIndex) throws java.lang.Exception {
      Metadata md = new Metadata();
      Object pixels = getLastImageMD(cameraChannelIndex, 0, md);
      return createTaggedImage(pixels, md, cameraChannelIndex);
   }
   
   public TaggedImage getLastTaggedImage() throws java.lang.Exception {
      return getLastTaggedImage(0);
   }

   public TaggedImage getNBeforeLastTaggedImage(long n) throws java.lang.Exception {
      Metadata md = new Metadata();
      Object pixels = getNBeforeLastImageMD(n, md);
      return createTaggedImage(pixels, md);
   }

   public TaggedImage popNextTaggedImage(int cameraChannelIndex) throws java.lang.Exception {
      Metadata md = new Metadata();
      Object pixels = popNextImageMD(cameraChannelIndex, 0, md);
      return createTaggedImage(pixels, md, cameraChannelIndex);
   }

   public TaggedImage popNextTaggedImage() throws java.lang.Exception {
      return popNextTaggedImage(0);
   }

   // convenience functions follow
   
   /*
    * Convenience function. Returns the ROI of the current camera in a java.awt.Rectangle.
    */
   public Rectangle getROI() throws java.lang.Exception {
      // ROI values are given as x,y,w,h in individual one-member arrays (pointers in C++):
      int[][] a = new int[4][1];
      getROI(a[0], a[1], a[2], a[3]);
      return new Rectangle(a[0][0], a[1][0], a[2][0], a[3][0]);
   }

   /* 
    * Convenience function. Returns the current x,y position of the stage in a Point2D.Double.
    */
   public Point2D.Double getXYStagePosition(String stage) throws java.lang.Exception {
      // stage position is given as x,y in individual one-member arrays (pointers in C++):
      double p[][] = new double[2][1];
      getXYPosition(stage, p[0], p[1]);
      return new Point2D.Double(p[0][0], p[1][0]);
   }
   
   /* 
    * Convenience function. Returns the current x,y position of the galvo in a Point2D.Double.
    */
   public Point2D.Double getGalvoPosition(String galvoDevice) throws java.lang.Exception {
      // stage position is given as x,y in individual one-member arrays (pointers in C++):
      double p[][] = new double[2][1];
      getGalvoPosition(galvoDevice, p[0], p[1]);
      return new Point2D.Double(p[0][0], p[1][0]);
   }

  public CMMCore() {
    this(MMCoreJJNI.new_CMMCore(), true);
  }

  public void loadDevice(String label, String library, String adapterName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadDevice(swigCPtr, this, label, library, adapterName);
  }

  public void unloadDevice(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_unloadDevice(swigCPtr, this, label);
  }

  public void unloadAllDevices() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_unloadAllDevices(swigCPtr, this);
  }

  public void initializeAllDevices() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_initializeAllDevices(swigCPtr, this);
  }

  public void initializeDevice(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_initializeDevice(swigCPtr, this, label);
  }

  public void updateCoreProperties() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_updateCoreProperties(swigCPtr, this);
  }

  public void reset() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_reset(swigCPtr, this);
  }

  public void clearLog() {
    MMCoreJJNI.CMMCore_clearLog(swigCPtr, this);
  }

  public void enableDebugLog(boolean enable) {
    MMCoreJJNI.CMMCore_enableDebugLog(swigCPtr, this, enable);
  }

  public boolean debugLogEnabled() {
    return MMCoreJJNI.CMMCore_debugLogEnabled(swigCPtr, this);
  }

  public void enableStderrLog(boolean enable) {
    MMCoreJJNI.CMMCore_enableStderrLog(swigCPtr, this, enable);
  }

  public String getUserId() {
    return MMCoreJJNI.CMMCore_getUserId(swigCPtr, this);
  }

  public String getHostName() {
    return MMCoreJJNI.CMMCore_getHostName(swigCPtr, this);
  }

  public void logMessage(String msg) {
    MMCoreJJNI.CMMCore_logMessage__SWIG_0(swigCPtr, this, msg);
  }

  public void logMessage(String msg, boolean debugOnly) {
    MMCoreJJNI.CMMCore_logMessage__SWIG_1(swigCPtr, this, msg, debugOnly);
  }

  public String saveLogArchive() {
    return MMCoreJJNI.CMMCore_saveLogArchive(swigCPtr, this);
  }

  public String saveLogArchiveWithPreamble(String preamble, int length) {
    return MMCoreJJNI.CMMCore_saveLogArchiveWithPreamble(swigCPtr, this, preamble, length);
  }

  public String getVersionInfo() {
    return MMCoreJJNI.CMMCore_getVersionInfo(swigCPtr, this);
  }

  public String getAPIVersionInfo() {
    return MMCoreJJNI.CMMCore_getAPIVersionInfo(swigCPtr, this);
  }

  public Configuration getSystemState() {
    return new Configuration(MMCoreJJNI.CMMCore_getSystemState(swigCPtr, this), true);
  }

  public Configuration getSystemStateCache() {
    return new Configuration(MMCoreJJNI.CMMCore_getSystemStateCache(swigCPtr, this), true);
  }

  public void updateSystemStateCache() {
    MMCoreJJNI.CMMCore_updateSystemStateCache(swigCPtr, this);
  }

  public void setSystemState(Configuration conf) {
    MMCoreJJNI.CMMCore_setSystemState(swigCPtr, this, Configuration.getCPtr(conf), conf);
  }

  public Configuration getConfigState(String group, String config) throws java.lang.Exception {
    return new Configuration(MMCoreJJNI.CMMCore_getConfigState(swigCPtr, this, group, config), true);
  }

  public Configuration getConfigGroupState(String group) throws java.lang.Exception {
    return new Configuration(MMCoreJJNI.CMMCore_getConfigGroupState(swigCPtr, this, group), true);
  }

  public Configuration getConfigGroupStateFromCache(String group) throws java.lang.Exception {
    return new Configuration(MMCoreJJNI.CMMCore_getConfigGroupStateFromCache(swigCPtr, this, group), true);
  }

  public void saveSystemState(String fileName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_saveSystemState(swigCPtr, this, fileName);
  }

  public void loadSystemState(String fileName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadSystemState(swigCPtr, this, fileName);
  }

  public void saveSystemConfiguration(String fileName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_saveSystemConfiguration(swigCPtr, this, fileName);
  }

  public void loadSystemConfiguration(String fileName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadSystemConfiguration(swigCPtr, this, fileName);
  }

  public void registerCallback(MMEventCallback cb) {
    MMCoreJJNI.CMMCore_registerCallback(swigCPtr, this, MMEventCallback.getCPtr(cb), cb);
  }

  public StrVector getAvailableDevices(String library) throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailableDevices(swigCPtr, this, library), true);
  }

  public StrVector getAvailableDeviceDescriptions(String library) throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailableDeviceDescriptions(swigCPtr, this, library), true);
  }

  public LongVector getAvailableDeviceTypes(String library) throws java.lang.Exception {
    return new LongVector(MMCoreJJNI.CMMCore_getAvailableDeviceTypes(swigCPtr, this, library), true);
  }

  public static void addSearchPath(String path) {
    MMCoreJJNI.CMMCore_addSearchPath(path);
  }

  public static StrVector getDeviceLibraries() throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getDeviceLibraries(), true);
  }

  public StrVector getLoadedDevices() {
    return new StrVector(MMCoreJJNI.CMMCore_getLoadedDevices(swigCPtr, this), true);
  }

  public StrVector getLoadedDevicesOfType(DeviceType devType) {
    return new StrVector(MMCoreJJNI.CMMCore_getLoadedDevicesOfType(swigCPtr, this, devType.swigValue()), true);
  }

  public StrVector getDevicePropertyNames(String label) throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getDevicePropertyNames(swigCPtr, this, label), true);
  }

  public String getProperty(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getProperty(swigCPtr, this, label, propName);
  }

  public String getPropertyFromCache(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPropertyFromCache(swigCPtr, this, label, propName);
  }

  public void setProperty(String label, String propName, String propValue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setProperty__SWIG_0(swigCPtr, this, label, propName, propValue);
  }

  public void setProperty(String label, String propName, boolean propValue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setProperty__SWIG_1(swigCPtr, this, label, propName, propValue);
  }

  public void setProperty(String label, String propName, int propValue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setProperty__SWIG_2(swigCPtr, this, label, propName, propValue);
  }

  public void setProperty(String label, String propName, float propValue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setProperty__SWIG_3(swigCPtr, this, label, propName, propValue);
  }

  public void setProperty(String label, String propName, double propValue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setProperty__SWIG_4(swigCPtr, this, label, propName, propValue);
  }

  public boolean hasProperty(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_hasProperty(swigCPtr, this, label, propName);
  }

  public StrVector getAllowedPropertyValues(String label, String propName) throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getAllowedPropertyValues(swigCPtr, this, label, propName), true);
  }

  public boolean isPropertyReadOnly(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isPropertyReadOnly(swigCPtr, this, label, propName);
  }

  public boolean isPropertyPreInit(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isPropertyPreInit(swigCPtr, this, label, propName);
  }

  public boolean isPropertySequenceable(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isPropertySequenceable(swigCPtr, this, label, propName);
  }

  public boolean hasPropertyLimits(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_hasPropertyLimits(swigCPtr, this, label, propName);
  }

  public double getPropertyLowerLimit(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPropertyLowerLimit(swigCPtr, this, label, propName);
  }

  public double getPropertyUpperLimit(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPropertyUpperLimit(swigCPtr, this, label, propName);
  }

  public void startPropertySequence(String label, String propName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startPropertySequence(swigCPtr, this, label, propName);
  }

  public void stopPropertySequence(String label, String propName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopPropertySequence(swigCPtr, this, label, propName);
  }

  public int getPropertySequenceMaxLength(String label, String propName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPropertySequenceMaxLength(swigCPtr, this, label, propName);
  }

  public void loadPropertySequence(String label, String propName, StrVector eventSequence) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadPropertySequence(swigCPtr, this, label, propName, StrVector.getCPtr(eventSequence), eventSequence);
  }

  public PropertyType getPropertyType(String label, String propName) throws java.lang.Exception {
    return PropertyType.swigToEnum(MMCoreJJNI.CMMCore_getPropertyType(swigCPtr, this, label, propName));
  }

  public DeviceType getDeviceType(String label) throws java.lang.Exception {
    return DeviceType.swigToEnum(MMCoreJJNI.CMMCore_getDeviceType(swigCPtr, this, label));
  }

  public String getDeviceLibrary(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getDeviceLibrary(swigCPtr, this, label);
  }

  public void unloadLibrary(String moduleName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_unloadLibrary(swigCPtr, this, moduleName);
  }

  public String getDeviceName(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getDeviceName(swigCPtr, this, label);
  }

  public String getParentLabel(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getParentLabel(swigCPtr, this, label);
  }

  public void setParentLabel(String label, String parentLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setParentLabel(swigCPtr, this, label, parentLabel);
  }

  public String getDeviceDescription(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getDeviceDescription(swigCPtr, this, label);
  }

  public boolean deviceBusy(String deviceName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_deviceBusy(swigCPtr, this, deviceName);
  }

  public void waitForDevice(String deviceName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_waitForDevice(swigCPtr, this, deviceName);
  }

  public void waitForConfig(String group, String configName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_waitForConfig(swigCPtr, this, group, configName);
  }

  public boolean systemBusy() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_systemBusy(swigCPtr, this);
  }

  public void waitForSystem() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_waitForSystem(swigCPtr, this);
  }

  public void waitForImageSynchro() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_waitForImageSynchro(swigCPtr, this);
  }

  public boolean deviceTypeBusy(DeviceType devType) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_deviceTypeBusy(swigCPtr, this, devType.swigValue());
  }

  public void waitForDeviceType(DeviceType devType) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_waitForDeviceType(swigCPtr, this, devType.swigValue());
  }

  public void sleep(double intervalMs) {
    MMCoreJJNI.CMMCore_sleep(swigCPtr, this, intervalMs);
  }

  public double getDeviceDelayMs(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getDeviceDelayMs(swigCPtr, this, label);
  }

  public void setDeviceDelayMs(String label, double delayMs) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setDeviceDelayMs(swigCPtr, this, label, delayMs);
  }

  public void setTimeoutMs(int timeoutMs) {
    MMCoreJJNI.CMMCore_setTimeoutMs(swigCPtr, this, timeoutMs);
  }

  public int getTimeoutMs() {
    return MMCoreJJNI.CMMCore_getTimeoutMs(swigCPtr, this);
  }

  public boolean usesDeviceDelay(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_usesDeviceDelay(swigCPtr, this, label);
  }

  public String getCoreErrorText(int code) {
    return MMCoreJJNI.CMMCore_getCoreErrorText(swigCPtr, this, code);
  }

  public String getCameraDevice() {
    return MMCoreJJNI.CMMCore_getCameraDevice(swigCPtr, this);
  }

  public String getShutterDevice() {
    return MMCoreJJNI.CMMCore_getShutterDevice(swigCPtr, this);
  }

  public String getFocusDevice() {
    return MMCoreJJNI.CMMCore_getFocusDevice(swigCPtr, this);
  }

  public String getXYStageDevice() {
    return MMCoreJJNI.CMMCore_getXYStageDevice(swigCPtr, this);
  }

  public String getAutoFocusDevice() {
    return MMCoreJJNI.CMMCore_getAutoFocusDevice(swigCPtr, this);
  }

  public String getImageProcessorDevice() {
    return MMCoreJJNI.CMMCore_getImageProcessorDevice(swigCPtr, this);
  }

  public String getSLMDevice() {
    return MMCoreJJNI.CMMCore_getSLMDevice(swigCPtr, this);
  }

  public String getGalvoDevice() {
    return MMCoreJJNI.CMMCore_getGalvoDevice(swigCPtr, this);
  }

  public String getChannelGroup() {
    return MMCoreJJNI.CMMCore_getChannelGroup(swigCPtr, this);
  }

  public void setCameraDevice(String cameraLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setCameraDevice(swigCPtr, this, cameraLabel);
  }

  public void setShutterDevice(String shutterLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setShutterDevice(swigCPtr, this, shutterLabel);
  }

  public void setFocusDevice(String focusLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setFocusDevice(swigCPtr, this, focusLabel);
  }

  public void setXYStageDevice(String xyStageLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setXYStageDevice(swigCPtr, this, xyStageLabel);
  }

  public void setAutoFocusDevice(String focusLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setAutoFocusDevice(swigCPtr, this, focusLabel);
  }

  public void setImageProcessorDevice(String procLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setImageProcessorDevice(swigCPtr, this, procLabel);
  }

  public void setSLMDevice(String slmLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSLMDevice(swigCPtr, this, slmLabel);
  }

  public void setGalvoDevice(String galvoLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setGalvoDevice(swigCPtr, this, galvoLabel);
  }

  public void setChannelGroup(String channelGroup) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setChannelGroup(swigCPtr, this, channelGroup);
  }

  public void defineConfig(String groupName, String configName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_defineConfig__SWIG_0(swigCPtr, this, groupName, configName);
  }

  public void defineConfig(String groupName, String configName, String deviceName, String propName, String value) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_defineConfig__SWIG_1(swigCPtr, this, groupName, configName, deviceName, propName, value);
  }

  public void defineConfigGroup(String groupName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_defineConfigGroup(swigCPtr, this, groupName);
  }

  public void deleteConfigGroup(String groupName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_deleteConfigGroup(swigCPtr, this, groupName);
  }

  public void renameConfigGroup(String oldGroupName, String newGroupName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_renameConfigGroup(swigCPtr, this, oldGroupName, newGroupName);
  }

  public boolean isGroupDefined(String groupName) {
    return MMCoreJJNI.CMMCore_isGroupDefined(swigCPtr, this, groupName);
  }

  public boolean isConfigDefined(String groupName, String configName) {
    return MMCoreJJNI.CMMCore_isConfigDefined(swigCPtr, this, groupName, configName);
  }

  public void setConfig(String groupName, String configName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setConfig(swigCPtr, this, groupName, configName);
  }

  public void deleteConfig(String groupName, String configName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_deleteConfig__SWIG_0(swigCPtr, this, groupName, configName);
  }

  public void deleteConfig(String groupName, String configName, String deviceLabel, String propName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_deleteConfig__SWIG_1(swigCPtr, this, groupName, configName, deviceLabel, propName);
  }

  public void renameConfig(String groupName, String oldConfigName, String newConfigName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_renameConfig(swigCPtr, this, groupName, oldConfigName, newConfigName);
  }

  public StrVector getAvailableConfigGroups() {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailableConfigGroups(swigCPtr, this), true);
  }

  public StrVector getAvailableConfigs(String configGroup) {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailableConfigs(swigCPtr, this, configGroup), true);
  }

  public String getCurrentConfig(String groupName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getCurrentConfig(swigCPtr, this, groupName);
  }

  public String getCurrentConfigFromCache(String groupName) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getCurrentConfigFromCache(swigCPtr, this, groupName);
  }

  public Configuration getConfigData(String configGroup, String configName) throws java.lang.Exception {
    return new Configuration(MMCoreJJNI.CMMCore_getConfigData(swigCPtr, this, configGroup, configName), true);
  }

  public String getCurrentPixelSizeConfig() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getCurrentPixelSizeConfig__SWIG_0(swigCPtr, this);
  }

  public String getCurrentPixelSizeConfig(boolean cached) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getCurrentPixelSizeConfig__SWIG_1(swigCPtr, this, cached);
  }

  public double getPixelSizeUm() {
    return MMCoreJJNI.CMMCore_getPixelSizeUm__SWIG_0(swigCPtr, this);
  }

  public double getPixelSizeUm(boolean cached) {
    return MMCoreJJNI.CMMCore_getPixelSizeUm__SWIG_1(swigCPtr, this, cached);
  }

  public double getPixelSizeUmByID(String resolutionID) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPixelSizeUmByID(swigCPtr, this, resolutionID);
  }

  public double getMagnificationFactor() {
    return MMCoreJJNI.CMMCore_getMagnificationFactor(swigCPtr, this);
  }

  public void setPixelSizeUm(String resolutionID, double pixSize) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setPixelSizeUm(swigCPtr, this, resolutionID, pixSize);
  }

  public void definePixelSizeConfig(String resolutionID, String deviceName, String propName, String value) {
    MMCoreJJNI.CMMCore_definePixelSizeConfig__SWIG_0(swigCPtr, this, resolutionID, deviceName, propName, value);
  }

  public void definePixelSizeConfig(String resolutionID) {
    MMCoreJJNI.CMMCore_definePixelSizeConfig__SWIG_1(swigCPtr, this, resolutionID);
  }

  public StrVector getAvailablePixelSizeConfigs() {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailablePixelSizeConfigs(swigCPtr, this), true);
  }

  public boolean isPixelSizeConfigDefined(String resolutionID) {
    return MMCoreJJNI.CMMCore_isPixelSizeConfigDefined(swigCPtr, this, resolutionID);
  }

  public void setPixelSizeConfig(String resolutionID) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setPixelSizeConfig(swigCPtr, this, resolutionID);
  }

  public void renamePixelSizeConfig(String oldConfigName, String newConfigName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_renamePixelSizeConfig(swigCPtr, this, oldConfigName, newConfigName);
  }

  public void deletePixelSizeConfig(String configName) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_deletePixelSizeConfig(swigCPtr, this, configName);
  }

  public Configuration getPixelSizeConfigData(String configName) throws java.lang.Exception {
    return new Configuration(MMCoreJJNI.CMMCore_getPixelSizeConfigData(swigCPtr, this, configName), true);
  }

  public void setROI(int x, int y, int xSize, int ySize) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setROI(swigCPtr, this, x, y, xSize, ySize);
  }

  public void getROI(int[] x, int[] y, int[] xSize, int[] ySize) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_getROI(swigCPtr, this, x, y, xSize, ySize);
  }

  public void clearROI() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_clearROI(swigCPtr, this);
  }

  public void setExposure(double exp) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setExposure__SWIG_0(swigCPtr, this, exp);
  }

  public void setExposure(String label, double dExp) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setExposure__SWIG_1(swigCPtr, this, label, dExp);
  }

  public double getExposure() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getExposure(swigCPtr, this);
  }

  public Object getImage() throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getImage__SWIG_0(swigCPtr, this);
}

  public Object getImage(long numChannel) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getImage__SWIG_1(swigCPtr, this, numChannel);
}

  public void snapImage() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_snapImage(swigCPtr, this);
  }

  public long getImageWidth() {
    return MMCoreJJNI.CMMCore_getImageWidth(swigCPtr, this);
  }

  public long getImageHeight() {
    return MMCoreJJNI.CMMCore_getImageHeight(swigCPtr, this);
  }

  public long getBytesPerPixel() {
    return MMCoreJJNI.CMMCore_getBytesPerPixel(swigCPtr, this);
  }

  public long getImageBitDepth() {
    return MMCoreJJNI.CMMCore_getImageBitDepth(swigCPtr, this);
  }

  public long getNumberOfComponents() {
    return MMCoreJJNI.CMMCore_getNumberOfComponents(swigCPtr, this);
  }

  public long getNumberOfCameraChannels() {
    return MMCoreJJNI.CMMCore_getNumberOfCameraChannels(swigCPtr, this);
  }

  public String getCameraChannelName(long channelNr) {
    return MMCoreJJNI.CMMCore_getCameraChannelName(swigCPtr, this, channelNr);
  }

  public int getImageBufferSize() {
    return MMCoreJJNI.CMMCore_getImageBufferSize(swigCPtr, this);
  }

  public void assignImageSynchro(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_assignImageSynchro(swigCPtr, this, deviceLabel);
  }

  public void removeImageSynchro(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_removeImageSynchro(swigCPtr, this, label);
  }

  public void removeImageSynchroAll() {
    MMCoreJJNI.CMMCore_removeImageSynchroAll(swigCPtr, this);
  }

  public void setAutoShutter(boolean state) {
    MMCoreJJNI.CMMCore_setAutoShutter(swigCPtr, this, state);
  }

  public boolean getAutoShutter() {
    return MMCoreJJNI.CMMCore_getAutoShutter(swigCPtr, this);
  }

  public void setShutterOpen(boolean state) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setShutterOpen(swigCPtr, this, state);
  }

  public boolean getShutterOpen() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getShutterOpen(swigCPtr, this);
  }

  public void startSequenceAcquisition(int numImages, double intervalMs, boolean stopOnOverflow) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startSequenceAcquisition__SWIG_0(swigCPtr, this, numImages, intervalMs, stopOnOverflow);
  }

  public void startSequenceAcquisition(String cameraLabel, int numImages, double intervalMs, boolean stopOnOverflow) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startSequenceAcquisition__SWIG_1(swigCPtr, this, cameraLabel, numImages, intervalMs, stopOnOverflow);
  }

  public void prepareSequenceAcquisition(String cameraLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_prepareSequenceAcquisition(swigCPtr, this, cameraLabel);
  }

  public void startContinuousSequenceAcquisition(double intervalMs) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startContinuousSequenceAcquisition(swigCPtr, this, intervalMs);
  }

  public void stopSequenceAcquisition() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopSequenceAcquisition__SWIG_0(swigCPtr, this);
  }

  public void stopSequenceAcquisition(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopSequenceAcquisition__SWIG_1(swigCPtr, this, label);
  }

  public boolean isSequenceRunning() {
    return MMCoreJJNI.CMMCore_isSequenceRunning__SWIG_0(swigCPtr, this);
  }

  public boolean isSequenceRunning(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isSequenceRunning__SWIG_1(swigCPtr, this, label);
  }

  public Object getLastImage() throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getLastImage(swigCPtr, this);
}

  public Object popNextImage() throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_popNextImage(swigCPtr, this);
}

  public Object getLastImageMD(long channel, long slice, Metadata md) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getLastImageMD__SWIG_0(swigCPtr, this, channel, slice, Metadata.getCPtr(md), md);
}

  public Object popNextImageMD(long channel, long slice, Metadata md) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_popNextImageMD__SWIG_0(swigCPtr, this, channel, slice, Metadata.getCPtr(md), md);
}

  public Object getLastImageMD(Metadata md) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getLastImageMD__SWIG_1(swigCPtr, this, Metadata.getCPtr(md), md);
}

  public Object getNBeforeLastImageMD(long n, Metadata md) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_getNBeforeLastImageMD(swigCPtr, this, n, Metadata.getCPtr(md), md);
}

  public Object popNextImageMD(Metadata md) throws java.lang.Exception {
   return MMCoreJJNI.CMMCore_popNextImageMD__SWIG_1(swigCPtr, this, Metadata.getCPtr(md), md);
}

  public int getRemainingImageCount() {
    return MMCoreJJNI.CMMCore_getRemainingImageCount(swigCPtr, this);
  }

  public int getBufferTotalCapacity() {
    return MMCoreJJNI.CMMCore_getBufferTotalCapacity(swigCPtr, this);
  }

  public int getBufferFreeCapacity() {
    return MMCoreJJNI.CMMCore_getBufferFreeCapacity(swigCPtr, this);
  }

  public double getBufferIntervalMs() {
    return MMCoreJJNI.CMMCore_getBufferIntervalMs(swigCPtr, this);
  }

  public boolean isBufferOverflowed() {
    return MMCoreJJNI.CMMCore_isBufferOverflowed(swigCPtr, this);
  }

  public void setCircularBufferMemoryFootprint(long sizeMB) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setCircularBufferMemoryFootprint(swigCPtr, this, sizeMB);
  }

  public void initializeCircularBuffer() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_initializeCircularBuffer(swigCPtr, this);
  }

  public void clearCircularBuffer() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_clearCircularBuffer(swigCPtr, this);
  }

  public boolean isExposureSequenceable(String cameraLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isExposureSequenceable(swigCPtr, this, cameraLabel);
  }

  public void startExposureSequence(String cameraLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startExposureSequence(swigCPtr, this, cameraLabel);
  }

  public void stopExposureSequence(String cameraLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopExposureSequence(swigCPtr, this, cameraLabel);
  }

  public int getExposureSequenceMaxLength(String cameraLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getExposureSequenceMaxLength(swigCPtr, this, cameraLabel);
  }

  public void loadExposureSequence(String cameraLabel, DoubleVector exposureSequence_ms) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadExposureSequence(swigCPtr, this, cameraLabel, DoubleVector.getCPtr(exposureSequence_ms), exposureSequence_ms);
  }

  public double getLastFocusScore() {
    return MMCoreJJNI.CMMCore_getLastFocusScore(swigCPtr, this);
  }

  public double getCurrentFocusScore() {
    return MMCoreJJNI.CMMCore_getCurrentFocusScore(swigCPtr, this);
  }

  public void enableContinuousFocus(boolean enable) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_enableContinuousFocus(swigCPtr, this, enable);
  }

  public boolean isContinuousFocusEnabled() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isContinuousFocusEnabled(swigCPtr, this);
  }

  public boolean isContinuousFocusLocked() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isContinuousFocusLocked(swigCPtr, this);
  }

  public boolean isContinuousFocusDrive(String stageLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isContinuousFocusDrive(swigCPtr, this, stageLabel);
  }

  public void fullFocus() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_fullFocus(swigCPtr, this);
  }

  public void incrementalFocus() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_incrementalFocus(swigCPtr, this);
  }

  public void setAutoFocusOffset(double offset) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setAutoFocusOffset(swigCPtr, this, offset);
  }

  public double getAutoFocusOffset() throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getAutoFocusOffset(swigCPtr, this);
  }

  public void setState(String deviceLabel, int state) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setState(swigCPtr, this, deviceLabel, state);
  }

  public int getState(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getState(swigCPtr, this, deviceLabel);
  }

  public int getNumberOfStates(String deviceLabel) {
    return MMCoreJJNI.CMMCore_getNumberOfStates(swigCPtr, this, deviceLabel);
  }

  public void setStateLabel(String deviceLabel, String stateLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setStateLabel(swigCPtr, this, deviceLabel, stateLabel);
  }

  public String getStateLabel(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getStateLabel(swigCPtr, this, deviceLabel);
  }

  public void defineStateLabel(String deviceLabel, int state, String stateLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_defineStateLabel(swigCPtr, this, deviceLabel, state, stateLabel);
  }

  public StrVector getStateLabels(String deviceLabel) throws java.lang.Exception {
    return new StrVector(MMCoreJJNI.CMMCore_getStateLabels(swigCPtr, this, deviceLabel), true);
  }

  public int getStateFromLabel(String deviceLabel, String stateLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getStateFromLabel(swigCPtr, this, deviceLabel, stateLabel);
  }

  public PropertyBlock getStateLabelData(String deviceLabel, String stateLabel) {
    return new PropertyBlock(MMCoreJJNI.CMMCore_getStateLabelData(swigCPtr, this, deviceLabel, stateLabel), true);
  }

  public PropertyBlock getData(String deviceLabel) {
    return new PropertyBlock(MMCoreJJNI.CMMCore_getData(swigCPtr, this, deviceLabel), true);
  }

  public void definePropertyBlock(String blockName, String propertyName, String propertyValue) {
    MMCoreJJNI.CMMCore_definePropertyBlock(swigCPtr, this, blockName, propertyName, propertyValue);
  }

  public StrVector getAvailablePropertyBlocks() {
    return new StrVector(MMCoreJJNI.CMMCore_getAvailablePropertyBlocks(swigCPtr, this), true);
  }

  public PropertyBlock getPropertyBlockData(String blockName) {
    return new PropertyBlock(MMCoreJJNI.CMMCore_getPropertyBlockData(swigCPtr, this, blockName), true);
  }

  public void setPosition(String deviceLabel, double position) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setPosition(swigCPtr, this, deviceLabel, position);
  }

  public double getPosition(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getPosition(swigCPtr, this, deviceLabel);
  }

  public void setRelativePosition(String deviceLabel, double d) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setRelativePosition(swigCPtr, this, deviceLabel, d);
  }

  public void setOrigin(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setOrigin(swigCPtr, this, deviceLabel);
  }

  public void setAdapterOrigin(String deviceLabel, double d) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setAdapterOrigin(swigCPtr, this, deviceLabel, d);
  }

  public void setXYPosition(String deviceLabel, double x, double y) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setXYPosition(swigCPtr, this, deviceLabel, x, y);
  }

  public void setRelativeXYPosition(String deviceLabel, double dx, double dy) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setRelativeXYPosition(swigCPtr, this, deviceLabel, dx, dy);
  }

  public void getXYPosition(String deviceLabel, double[] x_stage, double[] y_stage) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_getXYPosition(swigCPtr, this, deviceLabel, x_stage, y_stage);
  }

  public double getXPosition(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getXPosition(swigCPtr, this, deviceLabel);
  }

  public double getYPosition(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getYPosition(swigCPtr, this, deviceLabel);
  }

  public void stop(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stop(swigCPtr, this, deviceLabel);
  }

  public void home(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_home(swigCPtr, this, deviceLabel);
  }

  public void setOriginXY(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setOriginXY(swigCPtr, this, deviceLabel);
  }

  public void setAdapterOriginXY(String deviceName, double x, double y) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setAdapterOriginXY(swigCPtr, this, deviceName, x, y);
  }

  public boolean isStageSequenceable(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isStageSequenceable(swigCPtr, this, label);
  }

  public void startStageSequence(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startStageSequence(swigCPtr, this, label);
  }

  public void stopStageSequence(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopStageSequence(swigCPtr, this, label);
  }

  public int getStageSequenceMaxLength(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getStageSequenceMaxLength(swigCPtr, this, label);
  }

  public void loadStageSequence(String label, DoubleVector positionSequence) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadStageSequence(swigCPtr, this, label, DoubleVector.getCPtr(positionSequence), positionSequence);
  }

  public boolean isXYStageSequenceable(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_isXYStageSequenceable(swigCPtr, this, label);
  }

  public void startXYStageSequence(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_startXYStageSequence(swigCPtr, this, label);
  }

  public void stopXYStageSequence(String label) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_stopXYStageSequence(swigCPtr, this, label);
  }

  public int getXYStageSequenceMaxLength(String label) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getXYStageSequenceMaxLength(swigCPtr, this, label);
  }

  public void loadXYStageSequence(String label, DoubleVector xSequence, DoubleVector ySequence) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadXYStageSequence(swigCPtr, this, label, DoubleVector.getCPtr(xSequence), xSequence, DoubleVector.getCPtr(ySequence), ySequence);
  }

  public void setSerialProperties(String portName, String answerTimeout, String baudRate, String delayBetweenCharsMs, String handshaking, String parity, String stopBits) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSerialProperties(swigCPtr, this, portName, answerTimeout, baudRate, delayBetweenCharsMs, handshaking, parity, stopBits);
  }

  public void setSerialPortCommand(String deviceLabel, String command, String term) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSerialPortCommand(swigCPtr, this, deviceLabel, command, term);
  }

  public String getSerialPortAnswer(String deviceLabel, String term) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getSerialPortAnswer(swigCPtr, this, deviceLabel, term);
  }

  public void writeToSerialPort(String deviceLabel, CharVector data) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_writeToSerialPort(swigCPtr, this, deviceLabel, CharVector.getCPtr(data), data);
  }

  public CharVector readFromSerialPort(String deviceLabel) throws java.lang.Exception {
    return new CharVector(MMCoreJJNI.CMMCore_readFromSerialPort(swigCPtr, this, deviceLabel), true);
  }

  public void setSLMImage(String deviceLabel, byte[] pixels) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSLMImage__SWIG_0(swigCPtr, this, deviceLabel, pixels);
  }

  public void setSLMImage(String deviceLabel, int[] pixels) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSLMImage__SWIG_1(swigCPtr, this, deviceLabel, pixels);
  }

  public void setSLMPixelsTo(String deviceLabel, short intensity) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSLMPixelsTo__SWIG_0(swigCPtr, this, deviceLabel, intensity);
  }

  public void setSLMPixelsTo(String deviceLabel, short red, short green, short blue) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setSLMPixelsTo__SWIG_1(swigCPtr, this, deviceLabel, red, green, blue);
  }

  public void displaySLMImage(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_displaySLMImage(swigCPtr, this, deviceLabel);
  }

  public long getSLMWidth(String deviceLabel) {
    return MMCoreJJNI.CMMCore_getSLMWidth(swigCPtr, this, deviceLabel);
  }

  public long getSLMHeight(String deviceLabel) {
    return MMCoreJJNI.CMMCore_getSLMHeight(swigCPtr, this, deviceLabel);
  }

  public long getSLMNumberOfComponents(String deviceLabel) {
    return MMCoreJJNI.CMMCore_getSLMNumberOfComponents(swigCPtr, this, deviceLabel);
  }

  public long getSLMBytesPerPixel(String deviceLabel) {
    return MMCoreJJNI.CMMCore_getSLMBytesPerPixel(swigCPtr, this, deviceLabel);
  }

  public void pointGalvoAndFire(String deviceLabel, double x, double y, double pulseTime_us) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_pointGalvoAndFire(swigCPtr, this, deviceLabel, x, y, pulseTime_us);
  }

  public void setGalvoSpotInterval(String deviceLabel, double pulseTime_us) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setGalvoSpotInterval(swigCPtr, this, deviceLabel, pulseTime_us);
  }

  public void setGalvoPosition(String deviceLabel, double x, double y) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setGalvoPosition(swigCPtr, this, deviceLabel, x, y);
  }

  public void getGalvoPosition(String deviceLabel, double[] x_stage, double[] y_stage) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_getGalvoPosition(swigCPtr, this, deviceLabel, x_stage, y_stage);
  }

  public void setGalvoIlluminationState(String deviceLabel, boolean on) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setGalvoIlluminationState(swigCPtr, this, deviceLabel, on);
  }

  public double getGalvoXRange(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getGalvoXRange(swigCPtr, this, deviceLabel);
  }

  public double getGalvoYRange(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getGalvoYRange(swigCPtr, this, deviceLabel);
  }

  public void addGalvoPolygonVertex(String deviceLabel, int polygonIndex, double x, double y) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_addGalvoPolygonVertex(swigCPtr, this, deviceLabel, polygonIndex, x, y);
  }

  public void deleteGalvoPolygons(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_deleteGalvoPolygons(swigCPtr, this, deviceLabel);
  }

  public void loadGalvoPolygons(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_loadGalvoPolygons(swigCPtr, this, deviceLabel);
  }

  public void setGalvoPolygonRepetitions(String deviceLabel, int repetitions) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_setGalvoPolygonRepetitions(swigCPtr, this, deviceLabel, repetitions);
  }

  public void runGalvoPolygons(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_runGalvoPolygons(swigCPtr, this, deviceLabel);
  }

  public void runGalvoSequence(String deviceLabel) throws java.lang.Exception {
    MMCoreJJNI.CMMCore_runGalvoSequence(swigCPtr, this, deviceLabel);
  }

  public String getGalvoChannel(String deviceLabel) throws java.lang.Exception {
    return MMCoreJJNI.CMMCore_getGalvoChannel(swigCPtr, this, deviceLabel);
  }

  public void acqBeforeFrame() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_acqBeforeFrame(swigCPtr, this);
  }

  public void acqAfterFrame() throws java.lang.Exception {
    MMCoreJJNI.CMMCore_acqAfterFrame(swigCPtr, this);
  }

  public DeviceDetectionStatus detectDevice(String deviceName) {
    return DeviceDetectionStatus.swigToEnum(MMCoreJJNI.CMMCore_detectDevice(swigCPtr, this, deviceName));
  }

  public StrVector getInstalledDevices(String hubDeviceLabel) {
    return new StrVector(MMCoreJJNI.CMMCore_getInstalledDevices(swigCPtr, this, hubDeviceLabel), true);
  }

  public String getInstalledDeviceDescription(String hubLabel, String deviceLabel) {
    return MMCoreJJNI.CMMCore_getInstalledDeviceDescription(swigCPtr, this, hubLabel, deviceLabel);
  }

  public StrVector getLoadedPeripheralDevices(String hubLabel) {
    return new StrVector(MMCoreJJNI.CMMCore_getLoadedPeripheralDevices(swigCPtr, this, hubLabel), true);
  }

  public StrVector getMACAddresses() {
    return new StrVector(MMCoreJJNI.CMMCore_getMACAddresses(swigCPtr, this), true);
  }

}
